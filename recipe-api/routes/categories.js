const express = require("express"); const router = express.Router(); const auth = require("../middleware/auth"); const Category = require("../models/Category"); router.get("/", async (req, res) => { try { const categories = await Category.find().sort({ name: 1 }); res.json(categories); } catch (error) { console.error("Error fetching categories:", error); res.status(500).json({ message: "Error fetching categories" }); } }); router.get("/:id", async (req, res) => { try { const category = await Category.findById(req.params.id); if (!category) { return res.status(404).json({ message: "Category not found" }); } res.json(category); } catch (error) { console.error("Error fetching category:", error); res.status(500).json({ message: "Error fetching category" }); } }); router.post("/", auth, async (req, res) => { try { const { name, description } = req.body; const existingCategory = await Category.findOne({ name: name.toLowerCase() }); if (existingCategory) { return res.status(400).json({ message: "Category with this name already exists" }); } const category = new Category({ name: name.toLowerCase(), description }); await category.save(); res.status(201).json(category); } catch (error) { console.error("Error creating category:", error); res.status(500).json({ message: "Error creating category" }); } }); router.put("/:id", auth, async (req, res) => { try { const { name, description } = req.body; const category = await Category.findById(req.params.id); if (!category) { return res.status(404).json({ message: "Category not found" }); } if (name && name !== category.name) { const existingCategory = await Category.findOne({ name: name.toLowerCase() }); if (existingCategory) { return res.status(400).json({ message: "Category with this name already exists" }); } } category.name = name ? name.toLowerCase() : category.name; category.description = description || category.description; await category.save(); res.json(category); } catch (error) { console.error("Error updating category:", error); res.status(500).json({ message: "Error updating category" }); } }); router.delete("/:id", auth, async (req, res) => { try { const category = await Category.findById(req.params.id); if (!category) { return res.status(404).json({ message: "Category not found" }); } await category.remove(); res.json({ message: "Category removed" }); } catch (error) { console.error("Error deleting category:", error); res.status(500).json({ message: "Error deleting category" }); } }); module.exports = router;
